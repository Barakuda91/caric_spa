doctype html
html
  head
    if locals.title
      title= title
    else
      title Caric.com |

    // Viewport mobile tag for sensible mobile support
    meta(name="viewport",content="width=device-width, initial-scale=1, maximum-scale=1")

    link(rel="stylesheet", href="/vendor/bootstrap/dist/css/bootstrap.min.css")

    block styles
    // STYLES
    link(rel="stylesheet", href="/styles/addgrid.css")
    link(rel="stylesheet", href="/styles/font-awesome.min.css")
    link(rel="stylesheet", href="/styles/importer.css")
    link(rel="stylesheet", href="/styles/styles.css")
    // STYLES END

  body
    block body


    //-
      Client-side Templates
      ========================

      HTML templates are important prerequisites of modern, rich client applications.
      To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
      that you load these templates client-side.

      By default, your Gruntfile is configured to automatically load and precompile
      client-side JST templates in your `assets/templates` folder, then
      include them here automatically (between TEMPLATES and TEMPLATES END).

      To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Import templates from other directories
          + Use a different template engine (handlebars, jade, dust, etc.)
          + Internationalize your client-side templates using a server-side
            stringfile before they're served.

    // TEMPLATES
    script(type="text/javascript", src="/jst.js")
    // TEMPLATES END

    //-
      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript
    script(src="/vendor/jquery/dist/jquery.min.js")
    script(src="/vendor/angular/angular.min.js")
    script(src="/vendor/angular-resource/angular-resource.min.js")
    script(src="/vendor/angular-route/angular-route.min.js")
    script(src="/vendor/bootstrap/dist/js/bootstrap.min.js")
    script(src="https://use.fontawesome.com/44919449a8.js")
    // SCRIPTS
    script(src="/js/dependencies/sails.io.js")
    script(src="/js/app/module.js")
    script(src="/js/app/controllers/AdverdController.js")
    script(src="/js/app/controllers/AdwerdController.js")
    script(src="/js/app/controllers/IndexController.js")
    script(src="/js/app/controllers/ListController.js")
    // SCRIPTS END

